@model E_commerce.Models.SellerDashboardViewModel
@{
    ViewData["Title"] = "Seller Dashboard";
}

<div class="container-fluid mt-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1><i class="fas fa-store text-primary"></i> Seller Dashboard</h1>
                <div class="btn-group" role="group">
                    <a asp-action="InventoryManager" class="btn btn-primary">
                        <i class="fas fa-boxes"></i> Inventory Manager
                    </a>
                    <a asp-action="SalesAnalytics" class="btn btn-info">
                        <i class="fas fa-chart-line"></i> Sales Analytics
                    </a>
                    <a asp-controller="Products" asp-action="Create" class="btn btn-success">
                        <i class="fas fa-plus"></i> Add Product
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Metrics Cards -->
    <div class="row mb-4">
        <!-- Total Inventory Value -->
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Inventory Value
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @Model.TotalInventoryValue.ToString("F2")
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Revenue -->
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Total Revenue
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @Model.TotalRevenue.ToString("F2")
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Products -->
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Total Products
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @Model.TotalProducts
                            </div>
                            <div class="text-xs text-muted">
                                @Model.TotalStock total items in stock
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-box fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stock Alerts -->
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Stock Alerts
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @(Model.OutOfStockProducts + Model.LowStockProducts)
                            </div>
                            <div class="text-xs text-muted">
                                @Model.OutOfStockProducts out of stock, @Model.LowStockProducts low stock
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts and Analytics Row -->
    <div class="row mb-4">
        <!-- Monthly Sales Chart -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-chart-area"></i> Monthly Sales Trend
                    </h6>
                </div>
                <div class="card-body">
                    <canvas id="monthlySalesChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>

        <!-- Category Breakdown -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-chart-pie"></i> Category Breakdown
                    </h6>
                </div>
                <div class="card-body">
                    @foreach (var category in Model.CategoryBreakdown.Take(5))
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span class="font-weight-bold">@category.Category</span>
                                <span class="text-success">@category.TotalValue.ToString("F2")</span>
                            </div>
                            <div class="text-muted small">
                                @category.ProductCount products â€¢ @category.TotalStock in stock
                            </div>
                            <div class="progress mt-1" style="height: 6px;">
                                <div class="progress-bar bg-primary" role="progressbar" 
                                     style="width: @((category.TotalValue / (Model.CategoryBreakdown.Sum(c => c.TotalValue) > 0 ? Model.CategoryBreakdown.Sum(c => c.TotalValue) : 1) * 100).ToString("F1"))%">
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Product Performance and Recent Orders -->
    <div class="row">
        <!-- Top Performing Products -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-star"></i> Top Performing Products
                    </h6>
                    <a asp-action="InventoryManager" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Current Stock</th>
                                    <th>Inventory Value</th>
                                    <th>Total Sold</th>
                                    <th>Revenue</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ProductPerformance.OrderByDescending(p => p.TotalRevenue).Take(8))
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                @if (item.Product.Images.Any())
                                                {
                                                    <img src="@item.Product.Images.First().ImagePath" alt="@item.Product.Name" 
                                                         class="rounded me-2" style="width: 40px; height: 40px; object-fit: cover;">
                                                }
                                                <div>
                                                    <div class="font-weight-bold">@item.Product.Name</div>
                                                    <small class="text-muted">@item.Product.Category</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge @(item.Product.Stock == 0 ? "badge-danger" : item.Product.Stock <= 5 ? "badge-warning" : "badge-success")">
                                                @item.Product.Stock
                                            </span>
                                        </td>
                                        <td class="font-weight-bold text-primary">@item.CurrentInventoryValue.ToString("F2")</td>
                                        <td>@item.TotalSold</td>
                                        <td class="font-weight-bold text-success">@item.TotalRevenue.ToString("F2")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a asp-controller="Products" asp-action="Edit" asp-route-id="@item.Product.ProductId" 
                                                   class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <button class="btn btn-sm btn-outline-success" 
                                                        onclick="showStockUpdateModal(@item.Product.ProductId, '@item.Product.Name', @item.Product.Stock, @item.Product.Price)">
                                                    <i class="fas fa-box"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Orders -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-clock"></i> Recent Orders (Last 7 Days)
                    </h6>
                </div>
                <div class="card-body">
                    @if (Model.RecentOrders.Any())
                    {
                        @foreach (var order in Model.RecentOrders.Take(8))
                        {
                            <div class="mb-3 p-2 border-left-primary border-left-2">
                                <div class="d-flex justify-content-between">
                                    <strong>@order.ProductName</strong>
                                    <span class="text-success">@order.Price.ToString("F2")</span>
                                </div>
                                <div class="text-muted small">
                                    Qty: @order.Quantity â€¢ @order.Order.OrderDate.ToString("MMM dd, HH:mm")
                                </div>
                                <div class="text-muted small">
                                    Order #@order.Order.OrderNumber.Substring(0, 8)...
                                </div>
                            </div>
                        }
                        
                        <div class="text-center mt-3">
                            <a asp-controller="Order" asp-action="SellerOrders" class="btn btn-sm btn-outline-primary">
                                View All Orders
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                            <p>No recent orders</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Stock Update Modal -->
<div class="modal fade" id="stockUpdateModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Stock</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="stockUpdateForm">
                    <input type="hidden" id="productId" />
                    <div class="form-group">
                        <label>Product:</label>
                        <p class="font-weight-bold" id="productName"></p>
                    </div>
                    <div class="form-group">
                        <label>Current Stock:</label>
                        <p id="currentStock"></p>
                    </div>
                    <div class="form-group">
                        <label for="newStock">New Stock Amount:</label>
                        <input type="number" class="form-control" id="newStock" min="0" required>
                    </div>
                    <div class="form-group">
                        <label>New Inventory Value:</label>
                        <p class="text-success font-weight-bold" id="newInventoryValue">0.00</p>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="updateStock()">Update Stock</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Monthly Sales Chart
        var ctx = document.getElementById('monthlySalesChart').getContext('2d');
        var monthlySalesChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.MonthlySales.Select(m => "'" + m.MonthName + "'")))],
                datasets: [{
                    label: 'Sales',
                    data: [@Html.Raw(string.Join(",", Model.MonthlySales.Select(m => m.Sales)))],
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.1)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Sales: ' + context.parsed.y.toLocaleString();
                            }
                        }
                    }
                }
            }
        });

        // Stock Update Modal Functions
        let currentPrice = 0;

        function showStockUpdateModal(productId, productName, currentStock, price) {
            document.getElementById('productId').value = productId;
            document.getElementById('productName').textContent = productName;
            document.getElementById('currentStock').textContent = currentStock + ' units';
            document.getElementById('newStock').value = currentStock;
            currentPrice = price;
            updateInventoryValue();
            $('#stockUpdateModal').modal('show');
        }

        function updateInventoryValue() {
            const newStock = document.getElementById('newStock').value || 0;
            const newValue = newStock * currentPrice;
            document.getElementById('newInventoryValue').textContent = newValue.toFixed(2);
        }

        document.getElementById('newStock').addEventListener('input', updateInventoryValue);

        function updateStock() {
            const productId = document.getElementById('productId').value;
            const newStock = document.getElementById('newStock').value;

            fetch('@Url.Action("UpdateStock", "SellerDashboard")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: `productId=${productId}&newStock=${newStock}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    $('#stockUpdateModal').modal('hide');
                    location.reload(); // Refresh to show updated data
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating stock.');
            });
        }

        // Auto-refresh dashboard every 5 minutes
        setTimeout(function() {
            location.reload();
        }, 300000);
    </script>
}

<style>
    .border-left-primary {
        border-left: 0.25rem solid #4e73df !important;
    }
    .border-left-success {
        border-left: 0.25rem solid #1cc88a !important;
    }
    .border-left-info {
        border-left: 0.25rem solid #36b9cc !important;
    }
    .border-left-warning {
        border-left: 0.25rem solid #f6c23e !important;
    }
    .border-left-2 {
        border-left-width: 3px !important;
    }
    .card {
        transition: transform 0.15s ease-in-out;
    }
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.12);
    }
</style>